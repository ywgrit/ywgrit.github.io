<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jump label</title>
    <link href="/jump-label/"/>
    <url>/jump-label/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是jump-label"><a href="#什么是jump-label" class="headerlink" title="什么是jump label"></a>什么是jump label</h1><ul><li><p>在通常情况下，我们会使用分支语句来决定是否执行某个事件，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> keyfalse;<br><br><span class="hljs-keyword">if</span> (!key)<br><span class="hljs-comment">// do unlikely code</span><br><span class="hljs-keyword">else</span><br><span class="hljs-comment">// do likely code    </span><br></code></pre></td></tr></table></figure></li></ul><p>​上述分支判断语句通常会被编译为<code>mov</code>, <code>test</code>, <code>je</code>的指令组合</p><ul><li><p>在linux kernel中，启用jump label后，这类分支语句可以改写为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFINE_STATIC_KEY_FALSE(key);<br><br><span class="hljs-keyword">if</span> (static_branch_unlikely(&amp;key))<br>        <span class="hljs-keyword">do</span> unlikely code<br><span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">do</span> likely code<br></code></pre></td></tr></table></figure></li></ul><p>​分支判断语句会被编译为<code>jmp 0</code>指令，消除了比较指令和分支指令</p><h1 id="jump-label的由来"><a href="#jump-label的由来" class="headerlink" title="jump label的由来"></a>jump label的由来</h1><p>由上面可知，jump label会消除比较指令和分支指令，因此适用于对同一条件的分支语句较多的情况。在linux kernel中，有一典型例子：tracepoint。tracepoint通常由条件判断语句实现，在每个tracepoint检查全局变量。看起来此类语句对整个程序的性能影响很小，其实不然，因为tracepoint出现的频率较高，并且全局变量会影响cache命中率。为了尽可能减少由于过多的条件判断语句带来的性能影响，<strong>linux kernel</strong> 引入了jump label。</p><h1 id="jump-label的实现原理"><a href="#jump-label的实现原理" class="headerlink" title="jump label的实现原理"></a>jump label的实现原理</h1><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>在linux kernel中实现了static key，利用code patch技术在运行时修改代码段的指令。</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>在编译条件判断语句时，往代码段中patch一条<code>no-op</code>指令</p><ul><li><p>禁用jump label</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> setfsid = <span class="hljs-literal">false</span>;<br>SYSCALL_DEFINE1(setfsgid, <span class="hljs-type">gid_t</span>, gid)<br>&#123;<br>    <span class="hljs-keyword">if</span> (setfsid) &#123;<br>        pr_info(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> __sys_setfsgid(gid);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/../img/kernel/code_optimization/objdump_disable_jump_label_false.png" alt="objdump_disable_jump_label_false"></p><ul><li><p>启用jump label</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFINE_STATIC_KEY_FALSE(setfsid);<br><br>SYSCALL_DEFINE1(setfsgid, <span class="hljs-type">gid_t</span>, gid)<br>&#123;<br>    <span class="hljs-keyword">if</span> (static_branch_unlikely(&amp;setfsid)) &#123; <span class="hljs-comment">// static_branch_unlikely的意思是条件不会满足</span><br>        pr_info(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> __sys_setfsgid(gid);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/../img/kernel/code_optimization/objdump_enable_jump_label_false.png" alt="objdump_enable_jump_label_false"></p><p>​可以看出使用jump label后</p><p>​1、<code>cmpb</code> + <code>je</code> 两条指令被替换为了-&gt; <code>xchg</code>一条指令，这就是code patch</p><p>​2、省去了8 + 2 - 2 &#x3D; 8个字节</p><ul><li><p>启用jump label，但是在分支语句中使用static_branch_likely时</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFINE_STATIC_KEY_FALSE(setfsid);<br><br>SYSCALL_DEFINE1(setfsgid, <span class="hljs-type">gid_t</span>, gid)<br>&#123;<br>    <span class="hljs-keyword">if</span> (static_branch_likely(&amp;setfsid)) &#123;<br>        pr_info(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> __sys_setfsgid(gid);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/kernel/code_optimization/objdump_enable_jump_label_false_but_likely.png" alt="objdump_enable_jump_label_false_but_likely"></p></li></ul><p>​可以看出，无论在分支语句中使用<code>static_branch_unlikely</code>还是<code>static_branch_likely</code>，编译出的对应指令段中，都未出现比较指令，要么是no-op指令(<code>xchg</code>)，要么是直接跳转指令(<code>jmp</code>)，因此都可以消除分支指令带来的性能影响。</p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>启用jump label后，如下两点有性能优化</p><ul><li>指令数减少</li><li>分支指令减少</li></ul><p>参考static key的<a href="https://docs.kernel.org/staging/static-keys.html">官方文档</a>，对于如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE0(getppid)<br>&#123;<br>      <span class="hljs-type">int</span> pid;<br><br>      <span class="hljs-keyword">if</span> (static_branch_unlikely(&amp;key))<br>              printk(<span class="hljs-string">&quot;I am the true branch\n&quot;</span>);<br><br>      rcu_read_lock();<br>      pid = task_tgid_vnr(rcu_dereference(current-&gt;real_parent));<br>      rcu_read_unlock();<br><br>      <span class="hljs-keyword">return</span> pid;<br>&#125;<br></code></pre></td></tr></table></figure><p>启用jump label后，即性能提升（我并不了解这里的benchmark）为</p><ul><li>动态指令数减少了0.2%</li><li>分支指令数减少了0.7%</li><li>运行周期数减少了2.8%</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux Kernel</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>io_uring</title>
    <link href="/io-uring/"/>
    <url>/io-uring/</url>
    
    <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>探索scylladb因高效io带来的极速性能，然而并未用上io_uring这一技术。不过无所谓了，如果io_uring在其执行框架seastar前提出，应该就被用上了。</p><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><ul><li><p><a href="https://kernel.dk/io_uring.pdf">Efficient IO with io_uring</a></p></li><li><p><a href="https://kernel.dk/io_uring-whatsnew.pdf">What’s new with io_uring</a></p></li><li><p><a href="https://lwn.net/Articles/776703/">Ringing in a new asynchronous I&#x2F;O API</a></p></li><li><p><a href="https://github.com/axboe/liburing">liburing</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/334658432">操作系统与存储：解析Linux内核全新异步IO引擎——io_uring设计与实现</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/kaxjfhcbGW5wP442QyWPSg">图解io_uring1</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/1wZpFhwJR-LNkQm-QzFxRQ">图解io_uring2</a></p></li><li><p><a href="https://xie.infoq.cn/article/9b07b729101d7abcd5db101ac">Linux IO模式之io_uring</a></p></li></ul><p>nginx把读取文件的操作异步地提交给内核后，内核会通知IO设备独立地执行操作，这样，nginx进程可以继续充分地占用CPU。而且，当大量读事件堆积到IO设备的队列中时，将会发挥出内核中“电梯算法”的优势，从而降低随机读取磁盘扇区的成本。</p><h2 id="AIO的缺陷"><a href="#AIO的缺陷" class="headerlink" title="AIO的缺陷"></a>AIO的缺陷</h2><p>但是它仍然不够完美，同样存在很多缺陷，还是以nginx为例，目前，nginx仅支持在读取文件时使用AIO，因为正常写入文件往往是写入内存就立刻返回，即只支持Direct write，效率很高，如果替换成AIO写入速度会明显下降。</p><ul><li><strong>仅支持direct IO</strong>。在采用AIO的时候，只能使用O_DIRECT，不能借助文件系统缓存来缓存当前的IO请求，还存在size对齐（直接操作磁盘，所有写入内存块数量必须是文件系统块大小的倍数，而且要与内存页大小对齐。）等限制，直接影响了aio在很多场景的使用。</li><li><strong>仍然可能被阻塞。语义不完备</strong>。即使应用层主观上，希望系统层采用异步IO，但是客观上，有时候还是可能会被阻塞。io_getevents(2)调用read_events读取AIO的完成events，read_events中的wait_event_interruptible_hrtimeout等待aio_read_events，如果条件不成立（events未完成）则调用__wait_event_hrtimeout进入睡眠（当然，支持用户态设置最大等待时间）。</li><li><strong>拷贝开销大</strong>。每个IO提交需要拷贝64+8字节，每个IO完成需要拷贝32字节，总共104字节的拷贝。这个拷贝开销是否可以承受，和单次IO大小有关：如果需要发送的IO本身就很大，相较之下，这点消耗可以忽略，而在大量小IO的场景下，这样的拷贝影响比较大。</li><li><strong>API不友好</strong>。每一个IO至少需要两次系统调用才能完成（submit和wait-for-completion)，需要非常小心地使用完成事件以避免丢事件。</li><li><strong>系统调用开销大</strong>。也正是因为上一条，io_submit&#x2F;io_getevents造成了较大的系统调用开销，在存在spectre&#x2F;meltdown（CPU熔断幽灵漏洞，CVE-2017-5754）的机器上，若如果要避免漏洞问题，系统调用性能则会大幅下降。在存储场景下，高频系统调用的性能影响较大。</li></ul><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="解决“系统调用开销大”的问题"><a href="#解决“系统调用开销大”的问题" class="headerlink" title="解决“系统调用开销大”的问题"></a>解决“系统调用开销大”的问题</h3><p>针对这个问题，考虑是否每次都需要系统调用。如果能将多次系统调用中的逻辑放到有限次数中来，就能将消耗降为常数时间复杂度。</p><h3 id="解决“拷贝开销大”的问题"><a href="#解决“拷贝开销大”的问题" class="headerlink" title="解决“拷贝开销大”的问题"></a>解决“拷贝开销大”的问题</h3><p>之所以在提交和完成事件中存在内存拷贝，是因为应用程序和内核之间的通信需要拷贝数据，所以为了避免这个问题，需要重新考量应用与内核间的通信方式。我们发现，两者通信，不是必须要拷贝，通过现有技术，可以让应用与内核共享内存，用于彼此通信，需要生产者-消费者模型。</p><p>要实现核外与内核的一个零拷贝，最佳的方式就是实现一块内存映射区域，两者共享一段内存，核外往这段内存写数据，然后通知内核使用这段内存数据，或者内核填写这段数据，核外使用这部分数据。因此我们需要一对共享的ring buffer用于应用程序和内核之间的通信。</p><p>共享ring buffer的设计主要带来以下几个好处：</p><ul><li>提交、完成请求时节省应用和内核之间的内存拷贝</li><li>使用 SQPOLL 高级特性时，应用程序无需调用系统调用</li><li>无锁操作，用memory ordering实现同步，通过几个简单的头尾指针的移动就可以实现快速交互。</li></ul><p>一块用于用户传递数据给内核，一块是内核传递数据给用户，一方只读，一方只写。 - 提交队列SQ(submission queue)中，应用是IO提交的生产者（producer），内核是消费者（consumer）。 - 完成队列CQ(completion queue)中，内核是完成事件的生产者，应用是消费者。</p><p>内核控制SQ ring的head和CQ ring的tail，应用程序控制SQ ring的tail和CQ ring的head</p><p><img src="/../img/io_uring/io_uring_ring_buffer.webp" alt="io_uring_ring_buffer"></p><p>那么他们分别需要保存的是什么数据呢？<br>假设A缓存区为核外写，内核读，就是将IO数据写到这个缓存区，然后通知内核来读；再假设B缓存区为内核写，核外读，他所承担的责任就是返回完成状态，标记A缓存区的其中一个entry的完成状态为成功或者失败等信息。</p><h4 id="代码统计"><a href="#代码统计" class="headerlink" title="代码统计"></a>代码统计</h4><p><img src="/../img/io_uring/io_uring_cloc.png" alt="io_uring_cloc"></p><h2 id="关键流程"><a href="#关键流程" class="headerlink" title="关键流程"></a>关键流程</h2><p>数据结构定义好了，逻辑实现具体是如何驱动这些数据结构的呢？使用上，大体分为准备、提交、收割过程。</p><p>有几个io_uring相关的系统调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/io_uring.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">io_uring_setup</span><span class="hljs-params">(u32 entries, <span class="hljs-keyword">struct</span> io_uring_params *p)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">io_uring_enter</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> to_submit,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> min_complete, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">sigset_t</span> *sig)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">io_uring_register</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> opcode,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">void</span> *arg, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nr_args)</span></span>;<br></code></pre></td></tr></table></figure><p>下面分析关键流程。</p><h3 id="io-uring准备阶段"><a href="#io-uring准备阶段" class="headerlink" title="io_uring准备阶段"></a>io_uring准备阶段</h3><p>io_uring通过io_uring_setup完成准备阶段。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">io_uring_setup</span><span class="hljs-params">(u32 entries, <span class="hljs-keyword">struct</span> io_uring_params *p)</span></span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Passed in for io_uring_setup(2). Copied back with updated info on success</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">io_uring_params</span> &#123;<br>__u32 sq_entries;<br>__u32 cq_entries;<br>__u32 flags;<br>__u32 sq_thread_cpu;<br>__u32 sq_thread_idle;<br>__u32 features;<br>__u32 wq_fd;<br>__u32 resv[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">io_sqring_offsets</span> sq_off;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">io_cqring_offsets</span> cq_off;<br>&#125;;<br></code></pre></td></tr></table></figure><p>flags中比较重要的有</p><ul><li><p>IORING_SETUP_IOPOLL</p><ul><li>io_uring 会使用轮询的方式执行所有的操作</li></ul></li><li><p>IORING_SETUP_SQPOLL</p><ul><li>io_uring 会创建一个内核线程专门用来收割用户提交的任务</li></ul></li><li><p>IORING_SETUP_SQ_AFF</p></li><li><p>IORING_SETUP_CLAMP</p></li><li><p>IORING_SETUP_SINGLE_ISSUER</p></li></ul><p>SQ中<strong>至少</strong>包含entries个元素</p><p>io_uring_setup系统调用的过程就是初始化相关数据结构，建立好对应的缓存区，然后通过系统调用的参数io_uring_params结构传递回去，告诉核外环内存地址在哪，起始指针的地址在哪等关键的信息。</p><p>需要初始化内存的内存分为三个区域，分别是SQ，CQ，SQEs。内核初始化SQ和CQ，SQ和CQ都是ring，此外，提交请求在SQ，CQ之间有一个间接数组，即内核提供了一个Submission Queue Entries（SQEs）数组。之所以额外采用了一个数组保存SQEs，是为了方便通过环形缓冲区提交内存上不连续的请求。SQ和CQ中每个节点保存的都是SQEs数组的索引，而不是实际的请求，实际的请求只保存在SQEs数组中。这样在提交请求时，就可以<strong>批量提交一组SQEs上不连续的请求。</strong></p><p><img src="/../img/io_uring/cq_sq_sqe.webp" alt="cq_sq_sqe"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// SQ/CQ</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span></span><br><span class="hljs-class">&#123;</span><br>    u32 head;<br>    u32 tail;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This data is shared(from kernel) with the application through the mmap at offsets</span><br><span class="hljs-comment"> * IORING_OFF_SQ_RING and IORING_OFF_CQ_RING.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The offsets to the member fields are published through struct</span><br><span class="hljs-comment"> * io_sqring_offsets when calling io_uring_setup.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_rings</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Head and tail offsets into the ring; the offsets need to be</span><br><span class="hljs-comment"> * masked to get valid indices.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The kernel controls head of the sq ring and the tail of the cq ring,</span><br><span class="hljs-comment"> * and the application controls tail of the sq ring and the head of the</span><br><span class="hljs-comment"> * cq ring.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span><span class="hljs-title">sq</span>, <span class="hljs-title">cq</span>;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Bitmasks to apply to head and tail offsets (constant, equals</span><br><span class="hljs-comment"> * ring_entries - 1, i.e., sq_ring_mask = sq_ring_entries - 1, cq_ring_mask = cq_ring_entries - 1)</span><br><span class="hljs-comment"> */</span><br>u32sq_ring_mask, cq_ring_mask;<br><span class="hljs-comment">/* Ring sizes (constant, power of 2) */</span><br>u32sq_ring_entries, cq_ring_entries;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Number of invalid entries dropped by the kernel due to</span><br><span class="hljs-comment"> * invalid index stored in array</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Written by the kernel, shouldn&#x27;t be modified by the</span><br><span class="hljs-comment"> * application (i.e. get number of &quot;new events&quot; by comparing to</span><br><span class="hljs-comment"> * cached value).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * After a new SQ head value was read by the application this</span><br><span class="hljs-comment"> * counter includes all submissions that were dropped reaching</span><br><span class="hljs-comment"> * the new SQ head (and possibly more).</span><br><span class="hljs-comment"> */</span><br>u32sq_dropped;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Runtime SQ flags</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Written by the kernel, shouldn&#x27;t be modified by the</span><br><span class="hljs-comment"> * application.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The application needs a full memory barrier before checking</span><br><span class="hljs-comment"> * for IORING_SQ_NEED_WAKEUP after updating the sq tail.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">atomic_t</span>sq_flags;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Runtime CQ flags</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Written by the application, shouldn&#x27;t be modified by the</span><br><span class="hljs-comment"> * kernel.</span><br><span class="hljs-comment"> */</span><br>u32cq_flags;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Number of completion events lost because the queue was full;</span><br><span class="hljs-comment"> * this should be avoided by the application by making sure</span><br><span class="hljs-comment"> * there are not more requests pending than there is space in</span><br><span class="hljs-comment"> * the completion queue.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Written by the kernel, shouldn&#x27;t be modified by the</span><br><span class="hljs-comment"> * application (i.e. get number of &quot;new events&quot; by comparing to</span><br><span class="hljs-comment"> * cached value).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * As completion events come in out of order this counter is not</span><br><span class="hljs-comment"> * ordered with any other data.</span><br><span class="hljs-comment"> */</span><br>u32cq_overflow;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ring buffer of completion events.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The kernel writes completion events fresh every time they are</span><br><span class="hljs-comment"> * produced, so the application is allowed to modify pending</span><br><span class="hljs-comment"> * entries.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span><span class="hljs-title">cqes</span>[] ____<span class="hljs-title">cacheline_aligned_in_smp</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_ring_ctx</span> &#123;</span><br><span class="hljs-comment">/* const or read-mostly hot data */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>drain_next: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>restricted: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>off_timeout_used: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>drain_active: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>has_evfd: <span class="hljs-number">1</span>;<br><span class="hljs-comment">/* all CQEs should be posted only by the submitter task */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>task_complete: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>lockless_cq: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>syscall_iopoll: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>poll_activated: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>drain_disabled: <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>compat: <span class="hljs-number">1</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span>*<span class="hljs-title">submitter_task</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_rings</span>*<span class="hljs-title">rings</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">percpu_ref</span><span class="hljs-title">refs</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">task_work_notify_mode</span><span class="hljs-title">notify_method</span>;</span><br>&#125; ____cacheline_aligned_in_smp;<br><br><span class="hljs-comment">/* submission data */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span><span class="hljs-title">uring_lock</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ring buffer of indices into array of io_uring_sqe, which is</span><br><span class="hljs-comment"> * mmapped by the application using the IORING_OFF_SQES offset.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This indirection could e.g. be used to assign fixed</span><br><span class="hljs-comment"> * io_uring_sqe entries to operations and only submit them to</span><br><span class="hljs-comment"> * the queue when needed.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The kernel modifies neither the indices array nor the entries</span><br><span class="hljs-comment"> * array.</span><br><span class="hljs-comment"> */</span><br>u32*sq_array; <span class="hljs-comment">// indices array</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span>*<span class="hljs-title">sq_sqes</span>;</span><br><span class="hljs-type">unsigned</span>cached_sq_head;<br><span class="hljs-type">unsigned</span>sq_entries;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Fixed resources fast path, should be accessed only under</span><br><span class="hljs-comment"> * uring_lock, and updated through io_uring_register(2)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_rsrc_node</span>*<span class="hljs-title">rsrc_node</span>;</span><br><span class="hljs-type">atomic_t</span>cancel_seq;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_file_table</span><span class="hljs-title">file_table</span>;</span><br><span class="hljs-type">unsigned</span>nr_user_files;<br><span class="hljs-type">unsigned</span>nr_user_bufs;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_mapped_ubuf</span>**<span class="hljs-title">user_bufs</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_submit_state</span><span class="hljs-title">submit_state</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_buffer_list</span>*<span class="hljs-title">io_bl</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xarray</span><span class="hljs-title">io_bl_xa</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_hash_table</span><span class="hljs-title">cancel_table_locked</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_alloc_cache</span><span class="hljs-title">apoll_cache</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_alloc_cache</span><span class="hljs-title">netmsg_cache</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * -&gt;iopoll_list is protected by the ctx-&gt;uring_lock for</span><br><span class="hljs-comment"> * io_uring instances that don&#x27;t use IORING_SETUP_SQPOLL.</span><br><span class="hljs-comment"> * For SQPOLL, only the single threaded io_sq_thread() will</span><br><span class="hljs-comment"> * manipulate the list, hence no extra locking is needed there.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_wq_work_list</span><span class="hljs-title">iopoll_list</span>;</span><br><span class="hljs-type">bool</span>poll_multi_queue;<br>&#125; ____cacheline_aligned_in_smp;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We cache a range of free CQEs we can use, once exhausted it</span><br><span class="hljs-comment"> * should go through a slower range setup, see __io_get_cqe()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span>*<span class="hljs-title">cqe_cached</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span>*<span class="hljs-title">cqe_sentinel</span>;</span><br><br><span class="hljs-type">unsigned</span>cached_cq_tail;<br><span class="hljs-type">unsigned</span>cq_entries;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_ev_fd</span>__<span class="hljs-title">rcu</span>*<span class="hljs-title">io_ev_fd</span>;</span><br><span class="hljs-type">unsigned</span>cq_extra;<br>&#125; ____cacheline_aligned_in_smp;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * task_work and async notification delivery cacheline. Expected to</span><br><span class="hljs-comment"> * regularly bounce b/w CPUs.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">llist_head</span><span class="hljs-title">work_llist</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>check_cq;<br><span class="hljs-type">atomic_t</span>cq_wait_nr;<br><span class="hljs-type">atomic_t</span>cq_timeouts;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wait_queue_head</span><span class="hljs-title">cq_wait</span>;</span><br>&#125; ____cacheline_aligned_in_smp;<br><br><span class="hljs-comment">/* timeouts */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">spinlock_t</span>timeout_lock;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">timeout_list</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">ltimeout_list</span>;</span><br><span class="hljs-type">unsigned</span>cq_last_tm_flush;<br>&#125; ____cacheline_aligned_in_smp;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span><span class="hljs-title">completion_cqes</span>[16];</span><br><br><span class="hljs-type">spinlock_t</span>completion_lock;<br><br><span class="hljs-comment">/* IRQ completion list, under -&gt;completion_lock */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_wq_work_list</span><span class="hljs-title">locked_free_list</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>locked_free_nr;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">io_buffers_comp</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">cq_overflow_list</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_hash_table</span><span class="hljs-title">cancel_table</span>;</span><br><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span>*<span class="hljs-title">sq_creds</span>;</span><span class="hljs-comment">/* cred used for __io_sq_thread() */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_sq_data</span>*<span class="hljs-title">sq_data</span>;</span><span class="hljs-comment">/* if using sq thread polling */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wait_queue_head</span><span class="hljs-title">sqo_sq_wait</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">sqd_list</span>;</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>file_alloc_start;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>file_alloc_end;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xarray</span><span class="hljs-title">personalities</span>;</span><br>u32pers_next;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">io_buffers_cache</span>;</span><br><br><span class="hljs-comment">/* Keep this last, we don&#x27;t need it for the fast path */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wait_queue_head</span><span class="hljs-title">poll_wq</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_restriction</span><span class="hljs-title">restrictions</span>;</span><br><br><span class="hljs-comment">/* slow path rsrc auxilary data, used by update/register */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_mapped_ubuf</span>*<span class="hljs-title">dummy_ubuf</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_rsrc_data</span>*<span class="hljs-title">file_data</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_rsrc_data</span>*<span class="hljs-title">buf_data</span>;</span><br><br><span class="hljs-comment">/* protected by -&gt;uring_lock */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">rsrc_ref_list</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_alloc_cache</span><span class="hljs-title">rsrc_node_cache</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wait_queue_head</span><span class="hljs-title">rsrc_quiesce_wq</span>;</span><br><span class="hljs-type">unsigned</span>rsrc_quiesce;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">io_buffers_pages</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_UNIX)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket</span>*<span class="hljs-title">ring_sock</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/* hashed buffered write serialization */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_wq_hash</span>*<span class="hljs-title">hash_map</span>;</span><br><br><span class="hljs-comment">/* Only used for accounting purposes */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span>*<span class="hljs-title">user</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span>*<span class="hljs-title">mm_account</span>;</span><br><br><span class="hljs-comment">/* ctx exit and cancelation */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">llist_head</span><span class="hljs-title">fallback_llist</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">delayed_work</span><span class="hljs-title">fallback_work</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">work_struct</span><span class="hljs-title">exit_work</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">tctx_list</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">completion</span><span class="hljs-title">ref_comp</span>;</span><br><br><span class="hljs-comment">/* io-wq management, e.g. thread count */</span><br>u32iowq_limits[<span class="hljs-number">2</span>];<br><span class="hljs-type">bool</span>iowq_limits_set;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">callback_head</span><span class="hljs-title">poll_wq_task_work</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">defer_list</span>;</span><br><span class="hljs-type">unsigned</span>sq_thread_idle;<br><span class="hljs-comment">/* protected by -&gt;completion_lock */</span><br><span class="hljs-type">unsigned</span>evfd_last_cq_tail;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If IORING_SETUP_NO_MMAP is used, then the below holds</span><br><span class="hljs-comment"> * the gup&#x27;ed pages for the two rings, and the sqes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>n_ring_pages;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>n_sqe_pages;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span>**<span class="hljs-title">ring_pages</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span>**<span class="hljs-title">sqe_pages</span>;</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><ul><li>首先需要创建一个上下文结构io_ring_ctx用来管理整个会话。</li><li>随后实现SQ和CQ内存区的映射，使用IORING_OFF_CQ_RING偏移量，使用io_cqring_offsets结构的实例，即io_uring_params中cq_off这个成员，SQ使用IORING_OFF_SQES这个偏移量。</li><li>其余的是一些错误检查、权限检查、资源配额检查等检查逻辑。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Allocate memory, create workqueue and fd.</span><br><span class="hljs-type">static</span> __cold <span class="hljs-type">int</span> <span class="hljs-title function_">io_uring_create</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> entries, <span class="hljs-keyword">struct</span> io_uring_params *p,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> io_uring_params __user *params)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_ring_ctx</span> *<span class="hljs-title">ctx</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_task</span> *<span class="hljs-title">tctx</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-comment">// 检查entries是否合法，以及IO_RING_MMAP等相关flag是否设置合理</span><br>    ...<br>        <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Use twice as many entries for the CQ ring. It&#x27;s possible for the</span><br><span class="hljs-comment"> * application to drive a higher depth than the size of the SQ ring,</span><br><span class="hljs-comment"> * since the sqes are only used at submission time. This allows for</span><br><span class="hljs-comment"> * some flexibility in overcommitting a bit. If the application has</span><br><span class="hljs-comment"> * set IORING_SETUP_CQSIZE, it will have passed in the desired number</span><br><span class="hljs-comment"> * of CQ ring entries manually.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">// 设置cq_entries</span><br>...<br>        <br>        <br><span class="hljs-comment">// 创建io_ring_ctx</span><br>ctx = io_ring_ctx_alloc(p);<br><br>    <br>    <span class="hljs-comment">// 设置io_ring_ctx的flag</span><br>    <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This is just grabbed for accounting purposes. When a process exits,</span><br><span class="hljs-comment"> * the mm is exited and dropped before the files, hence we need to hang</span><br><span class="hljs-comment"> * on to this mm purely for the purposes of being able to unaccount</span><br><span class="hljs-comment"> * memory (locked/pinned vm). It&#x27;s not used for anything else.</span><br><span class="hljs-comment"> */</span><br>mmgrab(current-&gt;mm);<br>ctx-&gt;mm_account = current-&gt;mm;<br><br>    <span class="hljs-comment">// 分配内存，allocate memory if app haven&#x27;t, otherwise just map. The size = sizeof(io_rings) + p-&gt;cq_entries * sizeof(io_uring_cqe) + p-&gt;sq_entries * sizeof(u32) + p-&gt;sq_entries * sizeof(io_uring_sqe)</span><br>ret = io_allocate_scq_urings(ctx, p);<br><br>    <span class="hljs-comment">// 处理poll模式的逻辑</span><br>    ret = io_sq_offload_start(ctx, p);<br>    <br>    <br><span class="hljs-comment">// 设置params-&gt;sq_off和params-&gt;cq_off</span><br>    ...<br>        <br>        <br><br>file = io_uring_get_file(ctx); <span class="hljs-comment">// create anonymous file, put the ctx in, so we can access the detail of cq/sq accross this anonymous fd.</span><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Install ring fd as the very last thing, so we don&#x27;t risk someone</span><br><span class="hljs-comment"> * having closed it before we finish setup</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (p-&gt;flags &amp; IORING_SETUP_REGISTERED_FD_ONLY)<br>ret = io_ring_add_registered_file(tctx, file, <span class="hljs-number">0</span>, IO_RINGFD_REG_MAX);<br><span class="hljs-keyword">else</span><br>ret = io_uring_install_fd(file);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err_fput;<br><br>&#125;<br><br><br><span class="hljs-comment">// 其中，我们对cq/sq可以进行的操作如下所示，此结构会在io_uring_get_file放入到file-&gt;f_op中</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">io_uring_fops</span> =</span> &#123;<br>.release= io_uring_release,<br>.mmap= io_uring_mmap,<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_MMU</span><br>.get_unmapped_area = io_uring_nommu_get_unmapped_area,<br>.mmap_capabilities = io_uring_nommu_mmap_capabilities,<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>.get_unmapped_area = io_uring_mmu_get_unmapped_area,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>.poll= io_uring_poll,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_PROC_FS</span><br>.show_fdinfo= io_uring_show_fdinfo,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><br><span class="hljs-comment">// io_uring_mmap的核心实现如下所示</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">io_uring_validate_mmap_request</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file,</span><br><span class="hljs-params">    <span class="hljs-type">loff_t</span> pgoff, <span class="hljs-type">size_t</span> sz)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_ring_ctx</span> *<span class="hljs-title">ctx</span> =</span> file-&gt;private_data;<br><span class="hljs-type">loff_t</span> offset = pgoff &lt;&lt; PAGE_SHIFT;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">void</span> *ptr;<br><br><span class="hljs-comment">/* Don&#x27;t allow mmap if the ring was setup without it */</span><br><span class="hljs-keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP)<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br><br><span class="hljs-keyword">switch</span> (offset &amp; IORING_OFF_MMAP_MASK) &#123;<br><span class="hljs-keyword">case</span> IORING_OFF_SQ_RING:<br><span class="hljs-keyword">case</span> IORING_OFF_CQ_RING:<br>ptr = ctx-&gt;rings;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> IORING_OFF_SQES:<br>ptr = ctx-&gt;sq_sqes;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> IORING_OFF_PBUF_RING: &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> bgid;<br><br>bgid = (offset &amp; ~IORING_OFF_MMAP_MASK) &gt;&gt; IORING_OFF_PBUF_SHIFT;<br>mutex_lock(&amp;ctx-&gt;uring_lock);<br>ptr = io_pbuf_get_address(ctx, bgid);<br>mutex_unlock(&amp;ctx-&gt;uring_lock);<br><span class="hljs-keyword">if</span> (!ptr)<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br>&#125;<br><br>page = virt_to_head_page(ptr);<br><span class="hljs-keyword">if</span> (sz &gt; page_size(page))<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br><br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Magic offsets for the application to mmap the data it needs, &#x27;LL&#x27; means unsigned long long, we can see that SQ_RING/CQ_RING max size is 0x8000000ULLB = 128MB, SQES max size is 0x70000000ULLB = 1792MB.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_SQ_RING0ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_CQ_RING0x8000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_SQES0x10000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_PBUF_RING0x80000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OF`F_PBUF_SHIFT16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_MMAP_MASK0xf8000000ULL</span><br><br><br><br></code></pre></td></tr></table></figure><h4 id="数据分布"><a href="#数据分布" class="headerlink" title="数据分布"></a>数据分布</h4><p>io_rings的数据分布</p><ul><li>struct io_rings的其他字段</li><li>struct io_uring_cqe cqes[]</li><li>u32 *sq_array &#x2F;&#x2F; u32的数组，是指向sq_sqes的indice数组</li></ul><p>如下图所示，可见io_uring_cqe和sq_array是相邻的</p><img src="../img/io_uring/io_rings.png" alt="io_rings" style="zoom: 25%;" /><p>io_uring_sqe（真实的sqe）和io_rings不连续，如下图所示</p><p><img src="/../img/io_uring/io_uring_sqe.png" alt="io_uring_sqe"></p><p>用户只能得到io_uring_params，其中存放了io_sqring_offsets和io_cqring_offsets，根据这两个结构体，用户便可以访问io_rings中的sq_array和cqes，如下图所示</p><p><img src="/../img/io_uring/io_rings_complete_structure.png" alt="io_rings_complete_structure"></p><p>如上所示，用户可以通过mmap拿到io_rings，再加上用户可以访问io_uring_params的io_sqring_offsets和io_cqring_offsets，因此用户可以访问到io_rings的各个成员</p><p><img src="/../img/io_uring/io_uring_with_user.png" alt="io_uring_with_user"></p><p>为什么要有sq_off&#x2F;cq_off，拿到io_rings后，直接访问成员不可以吗？难道是</p><p>mmap后，用户得到的io_rings只是一个地址，不是一个结构体</p><p><strong>画图：两个 struct io_uring和sqes、cqes、sq_array的关系</strong></p><p>sq_array其实并不是很适用，所以内核有个选项可以禁用sq_array，<a href="https://patchwork.kernel.org/project/io-uring/patch/0672f81d64ffe9f91835e240d8fef7a72bd895ec.1692119257.git.asml.silence@gmail.com/#25478281">参考</a></p><p>基本上在任何位置只需要能持有io_ring_ctx和io_uring_params就可以找到任何数据所在的位置</p><h3 id="IO提交"><a href="#IO提交" class="headerlink" title="IO提交"></a>IO提交</h3><p>io_uring提供了submission offload模式，使得提交过程完全不需要进行系统调用。当程序在用户态设置完SQE，并通过修改SQ的tail完成一次插入时，如果此时SQ线程处于唤醒状态，那么可以立刻捕获到这次提交，这样就避免了用户程序调用io_uring_enter。如上所说，如果SQ线程处于休眠状态，则需要通过使用IORING_SQ_NEED_WAKEUP标志位调用io_uring_enter来唤醒SQ线程。</p><p>在初始化完成之后，应用程序就可以使用这些队列来添加 IO 请求，即填充 SQE。当请求都加入 SQ 后，应用程序还需要某种方式告诉内核，生产的请求待消费，这就是提交 IO 请求。</p><p>IO 提交的做法是找到一个空闲的 SQE，根据请求设置 SQE，并将这个 SQE 的索引放到 SQ 中。SQ 是一个典型的 RingBuffer，有 head，tail 两个成员，如果 head &#x3D;&#x3D; tail，意味着队列为空。SQE 设置完成后，需要修改 SQ 的 tail，以表示向 RingBuffer 中插入一个请求，当所有请求都加入 SQ 后，就可以使用相关接口 io_uring_enter（）来提交 IO 请求。</p><p>io_uring 提供了 io_uring_enter 这个系统调用接口，用于通知内核 IO 请求的产生以及等待内核完成请求。为了在追求极致 IO 性能的场景下获得最高性能，io_uring 还支持了轮询模式，轮询模式有两种使用场景，一种是提交 IO 过程的轮询模式这是通过设置 IORING_SETUP_SQPOLL 来开启；另外一种是收割 IO 过程的轮询模式，通过设置 IORING_SETUP_IOPOLL 来开启。</p><h4 id="提交-IO-的轮询机制"><a href="#提交-IO-的轮询机制" class="headerlink" title="提交 IO 的轮询机制"></a>提交 IO 的轮询机制</h4><p>为了提升性能，内核提供了轮询的方式来提交 IO 请求，在初始化阶段通过设置 io_uring 的相关标志位 IORING_SETUP_SQPOLL 可以开启该机制。</p><p>在设置 IORING_SETUP_SQPOLL 模式下， 内核会额外启动一个内核线程（在io_uring_setup函数执行完后），我们称作 SQ 线程。这个内核线程可以运行在某个指定的 core 上（通过 sq_thread_cpu 配置）。这个内核线程会不停的 Poll SQ，除非在一段时间内没有 Poll 到任何请求（通过 sq_thread_idle 配置），才会被挂起。</p><p>当程序在用户态设置完 SQE，并通过修改 SQ 的 tail 完成一次插入时，如果此时 SQ 线程处于唤醒状态，那么可以立刻捕获到这次提交，这样就避免了用户程序调用 io_uring_enter 这个系统调用。如果 SQ 线程处于休眠状态，则需要通过调用 io_uring_enter，并使用 IORING_ENTER_SQ_WAKEUP 参数，来唤醒 SQ 线程。用户态可以通过 sqring 的 flags 变量获取 SQ 线程的状态。</p><p>在提交 IO 的时候，如果出现了没有空闲的 SEQ entry 来提交新的请求的时候，应用程序不知道什么时候有空闲的情况，只能不断重试。为解决这种场景的问题，可以在调用 io_uring_enter 的时候设置 IORING_ENTER_SQ_WAIT 标志位，当提交新请求的时候，它会等到至少有一个新的 SQ entry 能使用的时候才返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">io_uring_enter</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> to_submit, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> min_complete, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">sigset_t</span> *sig)</span>;<br></code></pre></td></tr></table></figure><p>如果 <code>flags</code> 字段设置了 <em>IORING_ENTER_GETEVENTS</em>，调用会等待 <code>min_complete</code> 个 IO 完成后才返回。</p><p>min_complete 为 0，调用会立即完成，并返回已经完成的 IO，如果 min_complete 不为 0，并且 io_uring 设置了 IORING_SETUP_IOPOLL，那么调用通过忙等待的方式等待 min_complete 个 IO 完成事件，否则调用会挂起等待 IO 中断（或信号）</p><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p>目前io_uring_create中，检查sq-&gt;entries和cq_entries的代码有冗余，将其写为一个函数，可以参考如下函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">io_validate_ext_arg</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> flags, <span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *argp, <span class="hljs-type">size_t</span> argsz)</span><br>&#123;<br><span class="hljs-keyword">if</span> (flags &amp; IORING_ENTER_EXT_ARG) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_getevents_arg</span> <span class="hljs-title">arg</span>;</span><br><br><span class="hljs-keyword">if</span> (argsz != <span class="hljs-keyword">sizeof</span>(arg))<br><span class="hljs-keyword">return</span> -EINVA<br><span class="hljs-keyword">if</span> (copy_from_user(&amp;arg, argp, <span class="hljs-keyword">sizeof</span>(arg)))<br><span class="hljs-keyword">return</span> -EFAULT;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="linux-kernel之前看的代码"><a href="#linux-kernel之前看的代码" class="headerlink" title="linux kernel之前看的代码"></a>linux kernel之前看的代码</h4><p>e38afaea62051bf540a624c01e45418d9332b6fe</p><p>v6.6</p><p>只支持direct IO</p><h4 id="IO请求元数据开销较大"><a href="#IO请求元数据开销较大" class="headerlink" title="IO请求元数据开销较大"></a>IO请求元数据开销较大</h4><h4 id="不够异步"><a href="#不够异步" class="headerlink" title="不够异步"></a>不够异步</h4><h4 id="API不友好"><a href="#API不友好" class="headerlink" title="API不友好"></a>API不友好</h4><p>每一个IO至少需要两次系统调用才能完成（submit和wait-for-completion)，<strong>两次还是两种？</strong></p><h4 id="系统调用开销大"><a href="#系统调用开销大" class="headerlink" title="系统调用开销大"></a>系统调用开销大</h4><p>因为一次IO至少需要两次系统调用</p><h3 id="io-poll"><a href="#io-poll" class="headerlink" title="io_poll"></a>io_poll</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>内核通知用户事件是否完成有如下两种方式</p><ul><li>内核中断通知用户</li><li>io_poll，即用户轮询事件是否完成，适用于<ul><li>高速设备，例如从机械硬盘到固态硬盘，事件处理时间较短，因此占用cpu较少</li><li>IO请求流量较小</li></ul></li></ul><h4 id="目前的不足"><a href="#目前的不足" class="headerlink" title="目前的不足"></a>目前的不足</h4><h4 id="io-uring的增强"><a href="#io-uring的增强" class="headerlink" title="io_uring的增强"></a>io_uring的增强</h4><p>fastpoll</p><h2 id="io-uring优势"><a href="#io-uring优势" class="headerlink" title="io_uring优势"></a>io_uring优势</h2><ul><li>使用方便<ul><li>仅有三个系统调用</li><li>相关内核人员编写了对应的用户库liburing</li></ul></li><li>通用性强，支持<ul><li>传统IO（buffer IO + direct IO）</li><li>epoll型编程，适用于网络IO</li></ul></li><li>特性丰富，</li><li>高性能，IO请求overhead小<ul><li>不用系统调用</li></ul></li></ul><h4 id="io-uring使用ring-buffer"><a href="#io-uring使用ring-buffer" class="headerlink" title="io_uring使用ring buffer"></a>io_uring使用ring buffer</h4><p>共享ring buffer的设计主要带来以下几个好处：</p><ul><li>提交、完成请求时节省应用和内核之间的内存拷贝</li><li>使用 SQPOLL 高级特性时，应用程序无需调用系统调用</li><li>无锁操作，用memory ordering实现同步，通过几个简单的头尾指针的移动就可以实现快速交互。</li></ul><p>mmap两块内存，一块（SQ ring）用于核外传递数据给内核，一块（CQ ring）是内核传递数据给核外，一方只读，一方只写。内核控制SQ ring的head和CQ ring的tail，应用程序控制SQ ring的tail和CQ ring的head。</p><p>为什么用户和内核都可以操作两个ring的head和tail？</p><p>SQ ring和CQ ring和head和tail都用io_uring结构体存放存放在内核中，用户可以访问到这两个io_uring</p><h3 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h3><h4 id="IORING-FEAT-FAST-POLL"><a href="#IORING-FEAT-FAST-POLL" class="headerlink" title="IORING_FEAT_FAST_POLL"></a>IORING_FEAT_FAST_POLL</h4><p>用户只需要下发一次，不用被中断，事件可执行时，内核会帮忙执行，是这样吗？？？</p><p>目前io_uring不仅用于异步IO，更是一个异步编程框架，即只要是在用户态阻塞的操作，都可以想想是否可以用io_uring进行异步化，目前io_uring已经支持几十个系统调用</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>memory type</title>
    <link href="/memory-type/"/>
    <url>/memory-type/</url>
    
    <content type="html"><![CDATA[<h1 id="Memory-Type"><a href="#Memory-Type" class="headerlink" title="Memory Type"></a>Memory Type</h1><h2 id="什么是Memory-Type"><a href="#什么是Memory-Type" class="headerlink" title="什么是Memory Type"></a>什么是Memory Type</h2><p>每个内存区域都有自己的memory type，代表此内存区域的一些特性，例如数据是否会使用cache、访存操作是否可以reorder等等</p><p>Linux下可以通过以下命令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/kernel/debug/x86/pat_memtype_list<br></code></pre></td></tr></table></figure><p>目前IA32中的memory type如下表所示</p><table><thead><tr><th>Memory Type and Mnemonic</th><th>read cacheable</th><th>write cacheable</th><th>read allocate</th><th>write allocate</th><th>Allows Speculative Reads</th><th>Memory Ordering Model</th></tr></thead><tbody><tr><td>Strong Uncacheable(UC)</td><td>No</td><td>No</td><td>No</td><td>No</td><td>No</td><td>Strong Ordering</td></tr><tr><td>Uncacheable (UC-)</td><td>No</td><td>No</td><td>No</td><td>No</td><td>No</td><td>Strong Ordering. Can only be selected through the PAT. Can be overridden by WC in MTRRs.</td></tr><tr><td>Write Combining (WC)</td><td>No</td><td>No</td><td>No</td><td>No</td><td>Yes</td><td>Weak Ordering. Available by programming MTRRs or by selecting it through the PAT.</td></tr><tr><td>Write-through (WT)</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td><td>Yes</td><td>Speculative Processor Ordering</td></tr><tr><td>Write Back(WB)</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Speculative Processor Ordering</td></tr><tr><td>Write protected(WP)</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td><td>Speculative Processor Ordering. Available by programming MTRRs.</td></tr></tbody></table><ul><li><p><strong>Strong Uncacheable(UC)</strong> : 对于UC的内存读写操作都不会写到cache里，不会被reordering。</p><ul><li><p>对于memory-mapped I&#x2F;O device，UC很适用。SMP 系统上，各个 CPU 可以通过支持 <a href="https://zhuanlan.zhihu.com/p/95435168">cache 一致性协议</a>的总线 snoop 到其他 CPU 对 cache 的读写，而通过 PCIe 连接的 CPU 和 GPU 则不能互相 snoop，如图一所示，因此从 CPU 的角度，显存算是 I&#x2F;O memory，对其访问需要是 uncachable 的（注1）。reordering也会导致I&#x2F;O device读到dirty data，比如说I&#x2F;O device把这些内存作为一些控制用的寄存器使用。</p><p><img src="/../img/memory_type/cpu_gpu_access.png" alt="cpu_gpu_access">对于普通用途的内存，UC会导致性能的急剧下降。</p></li></ul><blockquote><p>注1: 一种例外是，有些I&#x2F;O device支持bus coherency protocol，可以和CPU保持cache一致性，这样的话是可以使用cacheable的内存的，但是这种总线协议也是有代价的。</p></blockquote></li><li><p><strong>Uncacheable (UC-)</strong>: 和UC类型一样，除了UC- memory type可以通过设置MTRRs被改写为WC memory type.</p></li><li><p><strong>Write Combining (WC)</strong>: <a href="https://download.intel.com/design/PentiumII/applnots/24442201.pdf">文档</a>，WC内存不会被cache，bus coherency protcol不会保证WC内存的读写。在WC类型的内存上的写操作会被延迟，数据会在cpu的<strong>WC buffer</strong>上被组合，这样可以减少总线上的访存操作。对同一地址的连续写，以最后一次写入的为准。</p><p>显存作为 frame buffer 有个特点，就是它容许对不同地址写操作的 combine 和 reorder（写入不同像素点的数据往往是不相关的），这和普通的 MMIO 是不同的，因此就有了 WC 这种相对特殊的类型</p><blockquote><p>注2: Speculative read是指读之前并不验证内存的有效性，先冒险的读进来，如果发现不是有效数据再取消读取操作，并更新内存后再读取. 比如说数据还是被buffer在WC buffer中</p></blockquote></li><li><p><strong>Write back(WB)</strong>:read 和 write 都 cache，在read 或者write miss时，都会同步写入数据到cache中</p></li><li><p><strong>Write Through(WT)</strong>:read 时 cache，write hit 时同步写入 cache line 和 main memory，而 write miss 时不分配 cache line（即没有 write allocate），直接写入 memory</p></li><li><p><strong>Write protected(WP)</strong>: 读操作和WT&#x2F;WB没有什么区别，读会被cache. 写不一样，写的时候会在bus上传播这个操作，并且导致其他处理器上的cache lines被更新。主要用于多处理器的情况。WP的内存，在写的时候就会更新其他处理器上的cache,而WB&#x2F;WT类型的内存需要等到其他处理读的时候才会去更形无效的cache</p></li></ul><p>上述几种内存属性中，WB理论上性能最好，因为既不会使用cache，又可以reordering</p><p><img src="/../img/memory_type/memory_reorder.png" alt="memory_reorder"></p><p>可以得知，cache和out-of-order并不是两个独立的特性，memory type将他们交织在了一起</p><h1 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_mm_prefetch(<span class="hljs-type">char</span> <span class="hljs-type">const</span>* p, <span class="hljs-type">int</span> i);<br></code></pre></td></tr></table></figure><p>从地址P处预取尺寸为cache line大小的数据缓存，参数i指示预取方式（_MM_HINT_T0, _MM_HINT_T1, _MM_HINT_T2, _MM_HINT_NTA，分别表示不同的预取方式）</p><ul><li>T0 预取数据到所有级别的缓存，包括L0</li><li>T1 预取数据到除L0外所有级别的缓存</li><li>T2 预取数据到除L0和L1外所有级别的缓存</li><li>NTA  预取数据到非临时缓冲结构中，可以最小化对缓存的污染</li></ul><p>NTA：non-temporal aligned，程序告诉处理器应该尽可能地避免以这个数据污染cache，因为数据只在一段很短的期间内会被使用</p><p>non-temporal的含义</p><ul><li>将数据放入cache，但假设只使用一次。通常的实现方法是加载数据，但偏置 “最近最少使用 “位，这样新加载的行将被视为 “最近最少使用”，而不是默认的 “最近使用”。 PREFETCHNTA 指令似乎就是这样做的。 PREFETCHNTA 还会将数据拉入 L1 数据缓存（因此在被逐出时，不必被放入到 L2 或者更高层次的缓存中），但不会将数据放入到 L2 或 L3。</li><li>不将数据放在cache中，而是将其放在单独的cacheline大小的缓冲区，即WC Buffer中，以允许多次连续（部分cacheline）加载。 这就是 MOVNTDQA 和 VMOVNTDQA 指令的作用。 它们用于WC内存类型。</li></ul><p>因此</p><ul><li>在system memory中时，memory type一般不是WC，NT的作用是将数据尽可能快地从cache中逐出</li><li>在属性为WC的内存中，NT的作用是使用cpu的internal wirte buffer，不将数据放入到cache中。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>IA32</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
